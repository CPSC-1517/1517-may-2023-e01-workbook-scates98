@page
@model WebApp.Pages.Samples.BasicDataManagementModel
@{
    ViewData["Title"] = "Basic Data Management";
}


<h1>Basic Data Management</h1>
<blockquote>
    This page will explore the most common controls you will probably use on a form. There will be multiple buttons (events) to code in the PageModel (a.k.a. Code-Behind). The controls will be a mix of label, input, select, textarea, checkbox, radio, and buttons.
</blockquote>

@*
*******************************************************************************************************

  Controls: label, input, select, textarea, checkbox, radio, and buttons

    <label>: Does not need arguments
             Can have helper tags: asp-for, asp-attributes, asp-validation-for
             Depending on CSS stylesheets, you can get different looks
    <input>: This is your major control to use for data input
           : It can be set to various types of input data usin the attribute type="xxxx"
           : Can tie the control of a propert on the PageModel using asp-for="xxxx"
               where xxxx is the name of the property on PageModel
           : The step attribute is used to indicate the number of decimal places allowed for
               the value. The default is 1 (integer stepping). If you wan to allow decimal places
               then you need to set the step attribute to a value less than 1 (ex. 0.01)
 <textarea>: Use to accept formin input for large amunts of text (ie. comments)
           : Can tie the control to a prpoerty on the PageModel using asp-for="xxxx"
               where xxxx is the name o f the property on the PageModel
           : Can se the rows and cols attributes to control the size of the textarea
   <select>: Use to accept form input for a list of items 
             Other Names: combobox, dropdownlist, selectionlist
   <option>: This control can have an optional "prompt line" which would be the first line 
                in the list
           : Select: Requires a pair element tag set (opening & closing)
           : The option tag can have a value attribute which is the value that will be 
                returned to the PageMode
           : Option: Requires a paired element tag set
           : Each line in the list is a separate option tag
                this control can be coded with "hard-coded" value OR
                logically loaded from a collection of data
            : Syntax of Option tag is:
                <option value="xxxx">yyyy</option>
                where xxxx is the value to be returned to the PageModel
                            this attribute can be omitted if you are not using the value attribute
                            then the return value will be the text displayed in the list (yyyy)
                      yyyy is the value to be displayed in the list

*******************************************************************************************************

    The folowing is a setup that allows the display of recorded errors
        saved within your PageModel when you use ModelState. The method used
        to save each erro is .AddModelError(xxxx).
    It will automatically format your errors in a list using asp-validation-summary

    An alternative is for you to do your own coding
    In this case, you will need:
        a) a property in your PageModel (List<string> ErrorList)
        b) you would have to code your own loop containing an unordered list <ul>
           Each list itme <li> would represent an error line

*******************************************************************************************************
*@

<div asp-validation-summary="All" class="error_area_color danger_color">
    @if(ModelState.ErrorCount>0)
    {
        <p>Please review the validation summary of following concerns to correct your submission:</p>
    }


</div>
@* MANUAL DISPLAY *@
<div class ="error_area_color danger_color">
 @if(Model.ErrorList.Count()>0)
 {
    <p>Please review the manual display of following concerns to correct your submission:</p>
    <ul>
        @foreach(var error in Model.ErrorList)
        {
            <li>@error</li>
        }
    </ul>
}
</div>
@* 
    Validation error messages can be placed with the corresponding input field
    To do this we will use a span tag and a helper tag of 'asp-validation-for'
    The helper tag will point to the property that the input field is associated with
*@
<form method="post" class="setflex">
    <div class="oneHalf">
        <label>
            Enter a number:
        </label>
            <input type="number" asp-for="Num" step="0.01" min="0.0" max="10" class="smallbox"/> @* added min/max values for form validation *@
            <span asp-validation-for="Num" class="danger_color"></span> @* Adding the class="danger_color" adds the custom CSS from myCSS.css *@
        <label>
            TextArea for large amounts of text (ie. comments):
            <textarea asp-for="MassText" rows="5" cols="60"></textarea>
            <span asp-validation-for="MassText" class="danger_color"></span>
        </label>
    </div>
    <div class="oneHalf">
        <label>
            Select a favoriute course from the dropdown list (select control):
        </label>
            <select asp-for="FavouriteCourse" class="mediumbox">
                <option value="0">Select Option ...</option>
                <option value="1008">Digital Media Tools</option>
                <option value="1012">Programming Fundamentals</option>
                <option value="1017">Web Design Fundamentals</option>
                <option value="1517">Introduction to Web Applications</option>
            </select>
            <span asp-validation-for="FavouriteCourse" class="danger_color"></span>

        <label>
            Using a select without a value on the option tag
        </label>
            <select asp-for="FavouriteCourseNoValueOnOption" class="largebox">
                <option>On Screen prompt line ...</option>
                <option>Digital Media Tools</option>
                <option>Programming Fundamentals</option>
                <option>Web Design Fundamentals</option>
                <option>Introduction to Web Applications</option>
            </select>
            <span asp-validation-for="FavouriteCourseNoValueOnOption" class="danger_color"></span>

    
    <br/><br/>
    <button type="submit" asp-page-handler="ControlProcessing">Submit Form Data</button>
    &nbsp;&nbsp;
    @* Creates a new button which links to another page *@
    <button type="submit" asp-page-handler="RedirectPage" formnovalidate>Go to Basic Events</button> 
    @* To surpress HTML validation that is on the control excplicitly, you can add the attribute 'formnovalidate' on the button *@
    </div>
</form>
<br/><br/>
Processing Results: @Model.Feedback
